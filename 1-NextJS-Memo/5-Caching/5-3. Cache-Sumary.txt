1. Requst fetch 캐시 (동일한 request 요청 방지)
1-1. 개발 환경 : 같은 URL, 같은 헤더일 떄 요청이 캐시된다.
1-2. 배포 환경 : 사전 렌더링 하기 하여 데이터를 가지고 있기 때문에 Request를 애초에 보내지 않는다.


2. Data Fetch 캐시 (fetch data를 받고 재사용)
2-1. 개발 환경 : fetch 데이터를 기본적으로 캐싱한다.
2-2. 배포 환경 : 마찬가지로 fetch 데이터를 캐싱한다.


3. Full Router Cache
3-1. 배포 환경에서만 작동한다.
3-2. 동적 페이지를 제외하고 나머지 SSG를 사전 렌더링한 후 Cache한다.


4. NextJS 애플리케이션 내부의 Backend 통신 Cache
4-1. 기본적으로 모든 것을 캐시하지 않는다.
4-2. revalidate, dynamic, 7,8,9를 사용해서 캐시를 관리해주면 된다.


5. export const revalidate = number...
=> 데이터 캐시를 제어한다.

6. export const dynamic = ''
=> default는 'auto' 응답 데이터 캐시하고 재사용한다.
=> 'force-dynamic' : 캐시하지 않고 데이터 reFetching

7. unstable_noStore : 이 함수가 호출된 컴포넌트는 데이터를 캐시하지 않는다.
8. unstable_cache : 이 함수로 덮힌 함수는 캐시됨을 보장한다.
9. cache : 동일한 request를 보내지 않고 기존의 request를 재사용한다.