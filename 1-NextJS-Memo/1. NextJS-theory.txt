1. NextJS란?
1-1. 서버 사이드 렌더링과 정적 사이트 생성을 지원하는 React 기반 프레임 워크입니다.

1-2. 서버 사이드 렌더링 : 서버에서 미리 HTML을 생성하여 클라이언트에게 전달하기 때문에 초기 로딩 시간 단축하고 검색 엔진 최적화에
유리한다.

1-3. 정적 사이트 생성 : 빌드 시점에 html을 미리 생성해서 정적 파일로 제공 => 빠르고 효율적인 페이지 로딩이 가능하다.

1-4. 자동 코드 스플리팅 : 각 페이지에 필요한 코드만 로드하여 초기 로딩 시간 단축, 페이간 전환 속도 빠름

1-5. 간편한 라우팅 : 파일 시스템 기반 라우팅

1-6. 이미지 최적화

1-7. 배포 용이성 : Vercel을 비롯한 여러 클라우드 플랫폼에 쉽게 배포할 수 있다.


2. 왜 NextJS가 검색 엔진 최적화(SEO)에 유리한가?

2-1. 검색 엔진 크롤러란?
웹 페이지를 자동으로 방문하고 콘텐츠를 수집하여 검색 엔진 데이터베이스에 저장하는 소프트웨어 프로그램입니다.

2-3. 기능
1. 웹 페이지 수집
2. 링크 추적(인덱싱 구조 분석을 위한 데이터 수집)
3. 메타 데이터 및 구조화 데이터 수집
4. 컨텐츠 분석


3. 검색 엔진의 인덱싱 과정
웹 페이지를 수집하고, 분석하여 데이터베이스에 저장하는 일련의 작업을 의미합니다.
해당 과정은 검색 엔진이 사용자의 검색 쿼리에 적합한 결과를 제공하기 위해 필요합니다.

과정
1. 크롤링 : 검색 엔진 크롤러가 웹 사이트를 방문하여 웹 페이지의 컨텐츠를 수집한다.
2. 수집된 데이터 처리 : 크롤러가 수집한 HTML, Image, video.. 데이터를 처리한다. 
    => 페이지의 텍스트 컨텐츠, 메타 태그, 제목, 설명 분석한다.
3. 인덱싱 : 처리된 데이터는 검색 엔진의 인덱스에 저장한다. 인덱스 => 거대한 DB, 각 웹페이지의 컨텐츠와 메타 데이터를 포함한다.
    => 검색 엔진은 인덱스를 사용하여 특정 검색 쿼리에 대한 적합한 결과를 빠르게 찾을 수 있게한다.
4. 랭킹 : 인덱싱된 페이지는 검색 결과 페이지에 표시될 순서를 결정하기 위해 평가된다. 특정 알고리즘에 의해 랭킹이 매겨진다.

3-1. 인덱싱 과정의 상세 내용
1. 컨텐츠 분석 : 페이지의 텍스트를 분석하여 주요 주제와 키워드를 파악합니다./ 이미지나 동영상도 분석한다.
2. 메타 데이터 및 구조화 데이터 처리 : 매타 태그(title, keywords..)를 읽어서  페이지의 내용을 파악하고 
검색 결과에 표시할 정보를 추출합니다./ 구조화 데이터(JSON..)를 통해 명확하게 이해할 수 있다.
3. 중복 컨텐츠 처리
4. 링크 구조 분석 : 내부 링크와 외부 링크간의 연결성 파악


4. 크롤러 VS 인덱싱
크롤러가 웹 페이지를 방문하여 컨텐츠를 수집하여 데이터를 인덱싱 시스템에 넘겨준다. 인덱싱 시스템이 데이터를 분석하여 랭킹을 매긴다.


5. React vs NextJS
5-1. NextJS는 HTML이 서버에 존재하고 JS을 실행하지 않아도 검색 엔진 크롤러가 바로 내 HTML 컨텐츠를 가져간다.
=> React는 JS를 실행해야만 컨텐츠를 가저갈 수 있기 떄문에 불리하다.

5-2. 빠른 로딩 속도로 인해 사용자 경험이 상승한다는 사실을 검색 엔진 크롤러가 긍정적으로 평가하여 검색 순위에 반영된다.
=> React는 NextJS보다 느리다. 애초에 클라이언트 사이드 렌더링은 초기 로딩 속도가 느리다는 것이 단점이다.

5-3. Next.js는 next/head 컴포넌트를 사용하여 각 페이지의 메타 태그와 제목, 설명 등을 쉽게 설정할 수 있습니다.
=> React CSR을 크롤러가 잘 이해하지 못할 수 있다.








