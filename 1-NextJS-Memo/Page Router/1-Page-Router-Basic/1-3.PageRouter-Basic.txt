1. Catch-All 라우트
1-1. 뒤에 경로가 얼마나 붙든 상관없이 단일 컴포넌트를 렌더링한다.
1-2. [...slug].js
1-3. router.query를 통해 {식별자 : ['경로', '경로'...]}를 얻을 수 있다.


2. Link 컴포넌트(클라이언트 사이드 내비게이션)
2-1. a 태그를 사용하면 전체 상태를 잃어버리고 이동시마다 애플리케이션의 전체 페이지를 새로이 요청한다.
2-2. Link 태그를 사용하면 상태를 유지하고 HTML 재 요청 하지 않는다.
2-3. Link href의 값으로 객체를 줘서 경로를 포함시킬 수 있다.
(<Link href={{
    pathname : '/client/[id]',
    query : {id : client.id}
}})


3. router.push();
3-1. 인자에 경로를 주어서 프로그래밍적으로 이동할 수 있다.

4. router.replace();
4-1. 인자에 경로를 줘서 프로그래밍적으로 이동하는데 전으로 돌아갈 수 없다.

5. 3,4의 경로는 객체를 통해 경로를 구성할 수 있다. => {pathname, query}


6. 404 Page
6-1. pages 폴더에 404.js 파일을 추가하면 404 에러를 던져졌을 떄 해당 파일의 컴포넌트가 반환된다.



*** 클라이언트 사이드 내비게이션은 HTML을 요청하지 않지만 클라이언트에서 컴포넌트 함수는 다시 실행되어서 렌더링된다.