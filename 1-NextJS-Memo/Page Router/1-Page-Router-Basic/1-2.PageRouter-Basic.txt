1. index.js
1-1. 파일 기반 라우팅을 할 떄 파일이름 경로가 붙지 않은 page
(pages에 index.js를 추가하면 해당 경로는 http://localhost:3000)


2. 정적 라우트 파일
2-1. index.js나 기타 몇몇을 제외한 파일들은 파일 이름 자체가 해당 컴포넌트의 경로를 의미한다.


3. 중첩 경로
3-1. 폴더 name을 통해서 라우트를 생성할 수 있다.
3-2. pages 하위 폴더에 about 폴더를 생성하면 해당 index.js는 /about 라우트, about 폴더에서 정적 라우트 파일을 생성하면
/about/staticFile 라우트


4. 동적 경로
4-1. 동적 경로(세그먼트) => []을 사용한다.
4-2. 파일이름에 [식별자].js로 생성하면 동적 라우트를 생성하는 것이다.
4-3. 정적 파일 경로가 동적 파일 경로보다 라우트 우선순위에 있다.
4-4. [] 폴더를 생성해서 동적 라우트를 생성할 수 도 있다. => [] 폴더 내부에 index.js가 해당 경로의 라우트를 가진다.
4-5. 동적 경로가 중첩된 마지막 라우트는 useRouter를 통해 동적 식별자와 값을 모두 가질 수 있다.


5. useRouter
5-1. page router에서 라우트 경로에 대한 Hooks이다.
5-2. const router = useRouter();
5-3. router.pathname => 경로 이름, router.query => {pathname : value}, ....
5-4. router.push('path') => 프로그래밍적으로 이동할 수 있다.




*** 왜 page router에서 useRouter를 사용했을 떄 콘솔 창에 왜이리 많은 로그가 생성되는지?
