1. API Route란?
1-1. 서버 측 로직을 Next.js 애플리케이션 내에 직접 구현할 수 있는 기능
1-2. pages/api 이렇게 위치해야 API Route라고 인식한다.
1-3. 파일 기반 라우팅 : pages/api/... => 해당 경로로 요청이 와야 한다.
1-4. 인자로 req, res를 받는다. => Node.js의 req, res와 비슷하다.


2. 클라이언트 코드와 BD를 Direct로 연결하면 보안상 문제가 발생한다.


3. 서버 측 논리를 사용할 수 있는게 API 폴더 기능 => Node.js처럼 Server처럼 사용가능
3-1. 클라이언트에서 fetch를 통해 get, post, delete, patch, put 요청을 보내서 API 폴더내의 함수가 처리하고 응답을
받을 수 있다.


4. API Route를 사용할 떄 getStaticProps, getServerSideProps를 사용해서 API 라우트에 접근하여 값을 가져오는 것은 불필요하다.
=> 직접 외부 DB에 접근하거나 외부 API를 호출할 수 있기 떄문
=> 동일한 서버라 비효율적이다. => export-import를 사용해서 서버 측 논리를 사용하는 것이 더 좋다.
=> 클라이언트는 Next API Route에 접근해서 값을 가져오는게 맞다. => 애초에 클라이언트는 직접 접근이 불가능하다. (보안)


5. 동적 API 라우트
5-1. 동적으로 API 요청을 수신하는 개념이다. => []를 사용해서 정의한다.
5-2. req.query.식별자를 통해 동적 api url를 얻을 수 있다.
5-3. 폴더를 생성하고 index.js를 생성하면 폴더name이 api url이 된다.
(page 라우트와 동일하다.)
5-4. [...slug] catch-all route API가 사용이 가능하다.