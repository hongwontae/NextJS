1. Deployment Options

1-1. next build
=> Next.js 애플리케이션을 프로덕션 환경에서 실행할 수 있도록 빌드
=> .next 디렉토리에 빌드 파일이 생성된다./ 파일은 서버에서 실행되어 SSR, CSR 번들 포함
=> Node.js 서버가 필요하다.
=> next build를 통해 next application을 생성하고 next start를 통해 Node.js 서버에서 구동할 수 있도록 로컬 환경을 구현할
수 있다.


1-2. next export
=>  Next.js 애플리케이션을 정적 HTML 파일로 변환하여 완전히 정적(static) 사이트로 배포
=> 모든 페이지를 사전에 렌더링하여 정적 HTML 파일로 생성
=> SSR 불가, Node.js 필요 없다.
=> out 디렉토리에 정적 HTML 파일과 정적 자원이 생성,  간단한 정적 파일 서버에 배포할 수 있다.


2. 배포 단계 최적화
2-1. console.log() 같은 개발 환경에서 사용하는 코드 삭제
2-2. 환경 변수를 이용해서 개발 환경과 배포 환경의 설정 


3. next.config.js
3-1. NextJS 애플리케이션의 설정을 담당하는 파일이다.
3-2. next.config.js => require, module/ next.config.js => import export
3-3. redirect, customr header, basePath, environment variables 설정을 자주 사용한다.

3-4. 환경 변수
1. import { PHASE_DEVELOPMENT_SERVER,.. } from "next/constants";
=> 애플리케이션이 구동되는 환경을 반환한다. => 이를 통해 개발일 떄, 배포일 떄 다른 환경변수를 사용할 수 있게 한다.
2. const nextConfig = (phase)=>{ phase는 애플리케이션이 현재 어떤 실행 단계에 놓여져 있는지 나타낸다. (production or deploy)
    if(phase === PASHE_DEVELOPMENT_SERVER){
        //
    }
}


4. Vercel 배포
4-1. Vercel이 NextJS를 생성했기 떄문에 이를 통한 호스팅이 효율적이다.
4-2. Node.js 서버가 구동되는 호스팅 서비스라면 아무 곳에서 해도 된다.



