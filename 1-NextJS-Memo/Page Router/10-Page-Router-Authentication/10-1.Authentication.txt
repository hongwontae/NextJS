1. MongoDB
1-1. MongoDB의 insert의 return 값은 acknowledged(승인 여부), insertedId(ObjectId value)


2. bcryptjs
2-1. await hash(password, 12) => 해당 패스워드를 몇 번 해시할것인가?
2-2. await compare(password, storedPassword) => 들어온 password와 db 저장 password를 비교하여 boolean 반환


2. Next-Auth
2-1. 인증 기능을 도와주는 라이브러리이다. (인증 제공자 지원, 세션 관리, JWT 지원, DB 연동...)
(인증 과정을 돕는 것이다. => 회원가입 로직은 알아서 만들어야 한다.)
2-2. next-auth를 사용하려면 pages/api/auth 폴더에 [...nextauth].js 파일을 만들어야 한다. => required


3. Next-Auth 구조
3-1. export defalut NextAuth({
    session : {},
    provider
})


4. import CredentialsProvider from "next-auth/providers/credentials";
4-1. 자격 증명 기반 인증을 설정하는 provider
4-2. 로그인 폼에서 email, password..등을 받아서 인증하는 정석적인 provider

4-3. 내부에서 authorize
=> 함수 인자는 클라이언트에서 받아온 정보가 존재한다. 이를 통해 인증을 실행한다.
=> 에러가 던져지면 client에게 에러 객체를 전달한다.
=> 함수의 return 값은 설정에 따라서 JWT, session이 된다.


5. Client Next Auth
5-1. import {signIn} from 'next-auth/react';
=> email, password.. 을 받아서 provider에게 넘기는 함수

5-2. import {signOut}
=> logOut 기능, 클라이언트 쿠키 저장소의 필수적인 세션 정보를 제거한다.



