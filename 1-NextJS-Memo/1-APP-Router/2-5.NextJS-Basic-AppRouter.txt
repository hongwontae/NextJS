1. NextJS의 form 제어와 'use server' 키워드
1-1. 해당 키워드는 서버에서만 실행됨을 보장하는 키워드이다. 
(함수 내부에서만 사용할 수 도 있다. 상단에 사용하면 서버 컴포넌트임을 명시하는 것이다.)
1-2.  함수 내부에서 사용하고 form tag의 action props에 해당 함수를 준다. => 폼이 제풀되면 NextJS의 서버에 전송된다.
1-4. form에 action에 연결된 use server 함수는 formData을 인자로 받는다.
1-5. 'use clinet'와 함께 사용하면 에러가 발생한다.
1-6. 파일을 분리하여 사용하고 싶다면 다른 파일 상단에 'use server' 키워드를 추가하고 함수만 추가하면 server function이 된다.
(이렇게 되면 서버에서 동작하기 떄문에 e.preventDefault()을 사용하지 않아도 된다.)
(서버 함수(컴포넌트)는 서버에서 작동하기 떄문에 비동기를 많이 다루기 때문에 async가 많이 붙지만 굳이 필수적인것은 아니다.)


2. slugify, xxs
2-1. slugify : 문자열을 URL-friendly한 슬러그로 변환해주는 라이브러리이다.
=> default로 공백 하이푼, 특수 문자 제거..
=> 첫 번쨰 인자로 slugify할 문자열, 두 번쨰 인자는 options 설정 객체이다.
=> {
    replacement : 공백 대체 문자열 지정,
    remove : 특정 문자 제거할 정규 표현식,
    lower : 소문자 변환,
    strict : 알파벳과 숫자로만 변환,
}

2-2. xxs : Cross-Site-Scripting 공격을 방지하기 위해 사용한다. (강제로 악성 스크립트를 넣는 공격 => XXS)
=> 입력 데이터를 필터링하여 악성 스크립트 제거 => default 기능
=> HTML 태그 속성 허용/ 제거 => OPTIONS을 통해 제어가능
=> <script>alert('XSS Attack!');</script><p>Safe Content</p> 이런 악성 스크립트가 오면 <script> 태그를 제거시켜버린다.


3. input tag Data DB에 저장
3-1. 모든 이미지에 대한 요청은 자동으로 public 폴더로 보내지기 때문에 image path을 저장할 떄 public은 제외한다.



*** fs-Module?
*** type file일 떄 arrayBuffer와 Node의 fs 모듈 연계
