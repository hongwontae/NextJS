1. NextJS 애플리케이션 install
=> npx create-next-app@latest


2. 서버 컴포넌트
2-1. JSX가 반환된 리액트 컴포넌트이지만 요청이 오면 HTML을 서버 사이드 렌더링 이후 응답으로 HTML을 전송한다.
2-2. console.log()를 찍어보면 브라우저에서 보이지 않는다. => Terminal에서 보인다. => 즉, 해당 컴포넌트는 서버에 존재한다.


3. 경로
3-1 app 디렉토리를 통해 경로를 생성할 수 있다.
3-2. app 디렉토리 내부에서 폴더를 생성하면 경로가 만들어진다. 페이지가 없다면 기본적인 404 에러 페이지가 반환된다.
=> 디렉토리 안에 컴포넌트가 존재해야 해당 경로에 페이지가 렌더링된다.


4. App Router Concepts-1
4-1. 초기 렌더링(사용자가 URL을 통해서 접근)할 떄 NextJS는 초기 페이지 HTML과 초기 페이지의 JS 번들(컴포넌트 로직(상태관리, 상호작용))
4-2. 해당 번들은 React 컴포넌트와 페이지 전환에 필요한 코드들이 포함되어 있다.
4-3. 이후 <Link> 같은 효과를 사용하면 클라이언트 내비게이션으로 페이지가 전환된다.
=> 'use client'가 붙지 않은 컴포넌트는 서버 사이드 렌더링으로 데이터가 전달된다.
=> 'use client'가 붙은 컴포넌트는 클라이언트 사이드 렌더링으로 데이터가 전달된다.


5. 클라이언트 사이드 내비게이션
5-1. 초기 페이지 이후 다음 페이지로 이동할 떄 'use client'가 붙은 컴포넌트
=> 서버에서 이미 로드된 데이터, 컴포넌트의 코드 스플리팅을 활용해 페이지를 업데이트 한다.
=> HTML을 가져오는 것이 아닌 필요한 데이터를 비동기적으로, 클라이언트 사이드 렌더링을 시작한다.

5-2. 5-1의 반대
=> 그냥 HTML을 가져온다.


6. <a> VS 클라이언트 사이드 내비게이션
6-1. <a> 태그는 전체 페이지를 로드한다. CSN은 필요한 부분만 동적으로 업데이트한다. ('use client'에 해당)
6-2. <a> 태그는 상태 미유지, SSN은 유지
6-3. 'use client'가 붙지 않은 컴포넌트는 HTML을 가져오지만 모든 전체 페이지를 로드하지 않는다. (동적 업데이트를 말하는게 아니다.
레이아웃 같은 이미 존재하는 데이터를 다시 fetching하지 않는다는 것이다.)


7. Layout Component
7-1. 모든 라우터 폴더는 Layout을 가질 수 있다.
7-2. app 폴더의 라우터 폴더의 Layout은 필수이다. => 여기서 초기 HTML metaData(head의 title, description..)을 설정할 수 있다.
7-3. 레이아웃 컴포넌트는 자신이 속한 라우터 폴더의 컴포넌트와 해당 폴더에서 파생되는 라우터 폴더의 컴포넌트를 덮는 역할을 한다.


8. FileName
8-1. App Router을 사용할 떄 파일명을 통해 해당 파일의 역할을 지정할 수 있다.
8-2. page.js(x)라는 이름을 부여하면 해당 라우터의 페이지가 된다.
8-3. layout.js(x)라는 이름을 부여하면 해당 라우터의 레이아웃이 된다.
8-4. 해당 라우터 폴더에서 components라는 폴더를 생성하고 page에 들어갈 컴포넌트들을 분리할 수 있다.
8-5. icon.png(ico, jpg..) : icon이라는 이름이 붙여지면 해당 라우터 페이지 아이콘으로 사용된다.
=> 다만 외부에서 컴포넌트 폴더를 생성하고 재사용 가능한 컴포넌트들을 넣는 것이 라우터 폴더를 깔끔하게 유지시킬 수 있다.



