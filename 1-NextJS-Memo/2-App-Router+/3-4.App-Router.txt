1. 프로그래밍적 이동
=> useRouter next/navigation을 사용하면 프로그래밍적으로 이동할 수 있다.
=> const router = useRouter();
=> router.back : 뒤로...


2. 라우트 그룹 기능
2-1. 소괄호를 사용해서 폴더를 생성하면 라우트 그룹 기능을 사용할 수 있다.
2-2. 이를 통해서 각 별로 레아아웃 처리를 원활히 할 수 있다.


3. 라우트 핸들러
3-1. App Directory에서 API 요청을 처리하는 방식이다.
3-2. 애플리케이션 내에서 API 엔드 포인트를 통해 Data를 처리할 수 있다.
3-3. 폴더 이름은 상관없지만 파일이름은 route.js로 지어야 작동한다.
3-4. 서버 측 함수이고, 이름은 GET, POST, PUT, PATCH, DELETE로 정해야 한다.
3-5. 인자로 request를 받을 수 있고 응답은 Response 형태를 갖춰서 보내야 한다.
3-6. 요청 URL은 페이지 요청 하듯이 폴더/폴더...로 하면 된다. (get, post 메서드 이름 생략해야 한다.)
3-7. 해당 함수들은 export 키워드를 앞에 붙여야 한다.


4. 미들웨어
4-1. 클라이언트에서 서버로 오는 요청을 가로채고 처리하는데 사용한다.
4-2. 응답 수정, 비동기 처리가 가능하다.
4-3. 루트 level에 middleware.js라는 파일을 생성하여 미들웨어를 설정할 수 있다.
4-4. export 키워드를 붙여야 하고 request 객체를 받을 수 있다.
4-5. 응답은 NextResponse을 return 하여 사용한다.
(NextResponse는 redirect, cookie 설정 등의 작업을 할 수 있다.)
4-6. 미들웨어 적용 범위 defalut는 모든 요청이다. / 특정 경로에만 적용하려면 matcher를 사용하면된다.
=> export const config = {
    matcher : ['/admin/:path*', '/profile/:path*'] => 배열 내부의 경로의 요청만 가로채겠다.
}





*** 초기 page.js는 root level에 존재하는게 식별하기 좋다. but 라우트 그룹 안에 존재해도 상관없다.
