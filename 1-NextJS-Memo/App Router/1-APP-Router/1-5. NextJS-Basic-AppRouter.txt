1. error
1-1. error가 발생했을 떄 next/js가 처리하는 error UI가 존재한다.
1-2. error.js라는 파일이 존재하면 custom-Error UI로 대체할 수 있다.
1-3. loading과 마찬가지로 현재 위치된 파일의 폴더와 하위 폴더가 error를 담당하고 하위 폴더가 구체적인 error를 가지고 있을 떄는
그것을 우선한다./ 폴더 형제 요소는 영향을 받거나 주지 않는다.
1-4. props를 통해 {error}를 받을 수 있다
1-5. 모든 error page는 'use client' 지시어가 필요하다.
(클라이언트 에러 처리(사용자 입력 처리, UI 관련 문제 등..), 사용자 경험 향상)
(클라이언트 사이드 렌더링 중에 에러가 발생할 수 도 있기 때문이다.)
(CSR 중에 에러 => 요청하여 error.js 가져온다./ SSR 중에 에러 => HTML 반환X, error.js 반환한다.)

*** loading, error는 현재 파일의 폴더 위치나 하위 폴더에서 에러나 로딩이 존재할 떄 해당 파일의 HTML을 대체하는 것으로 볼 수 도 있다.


2. Wrong URL => Not Found
2-1. 존재하지 않는 URL로 접근하려고 하면 Next/JS가 자동으로 Not Found page를 렌더링한다.
2-2. custom Not Found Page를 만들려면 이름을 not-found.js로 설정하고 컴포넌트를 구축하면 된다.
2-3. error나 loading 처럼 폴더 내에서 해당 컴포넌트 not-found를 담당한다.


3. 동적 경로와 경로 매개변수를 활용한 렌더링
3-1. 동적 경로를 통해서 접근한다.
3-2. 요청이 오면 서버 사이드 렌더링을 시작한다. 이 떄 동적 파라미터를 가져올 수 있는 {prams.dynamicParams}를 통해 식별자를 가져온다.
3-3. 식별자를 통해서 DB에 접근해서 데이터를 가져온다.
3-4. 데이터와 함께 JSX를 반환하여 HTML을 생성하고 반환한다.


4. notFound()
4-1. 해당 함수를 호출하면 해당 경로에서 가장 가까운 not-found.jsx를 반환한다.


5. Image Picker
5-1. input type="file" accept="image/*"
=> 로컬 시스템에서 파일을 선택할 수 있게 해주는 입력 필드를 생성한다.
=> accept : 사용자가 선택할 수 있는 파일 유형
=> multiple : 여러 개의 파일 선택
=> input의 type이 file일 떄 해당 파일 타켓 : e.target.files[n]

5-2. 미리보기 구현
1. Data URL : 이미지 값으로 src로 사용할 수 있다.

2. const reader = new FileReader : 파일을 비동기적으로 읽는 데 사용한다.
3. event : onload(파일 읽기가 성공적으로 완료되었을 떄 발생), onError, onProgress(파일을 읽는 도중), onloadend(파일 읽기
완료, but 실패해도 발생)
4. 메서드
1. reader.readAsArrayBuffer() : 파일 내용을 ArrayBuffer로 읽는다.
2. reader.readAsBinaryString() : 파일의 내용을 바이너리 문자열로 읽는다.
3. reader.readAsDataURL : Data URL로 읽는다.
4. reader.readAsTest : Text로 읽는다. => 기본 인코딩은 UTF-8

5. 메서드를 통해 데이터를 읽으면 해당 결과는 reader.result에 담기게 된다.


