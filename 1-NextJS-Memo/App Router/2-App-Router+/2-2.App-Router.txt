1. 병렬 라우트
1-1. 다양한 경로를 동시에 렌더링할 수 있게 해주는 기능이다.
1-2. @ 통해 폴더를 생성하고 page.js를 생성하면 해당 page를 병렬 처리할 수 있다. (gpt에서는 소괄호를 사용하라는데 그렇게하면 에러)
1-3. root layout.js를 생성하고 컴포넌트를 생성하면 props를 통해 {폴더명, 폴더명}을 통해 해당 page.js를 가져올 수 있다.

1-4. 병렬 라우트 중 하나의 라우트가 동적 경로나 일반 경로를 가질 떄 다른 병렬 라우트에서 default.js를 통해 처리해야 한다.
=> 당연히 한쪽 라우트는 해당 경로의 라우트가 없기 떄문이다. => defalut.js가 이를 처리해준다.
1-5. 병렬 라우트의 layout의 위치는 폴더와 같은 level에 존재해야 한다. 그래야 props를 통해 받을 수 있다.


2. Catch-All
2-1. 특정 경로 이하의 모든 경로를 한 페이지 컴포넌트에서 처리할 수 있는 기능
2-2. [[...name]]으로 정의한다.
2-3. 해당 라우트는 모든 경로를 받아들여서 처리하기 때문에 page.js는 해당 라우트에 존재해야 한다.
=> 모든 경로를 라우팅하는데 두 개의 page.js가 존재하면 에러가 발생한다.
2-4. 병렬 라우트 안에서 하나의 라우트는 Catch-All 라우트라면 다른 하나의 라우트는 default.js여야 충돌하지 않는다.


3. Throwing
3-1. page.js에서 인위적으로 throw를 던지거나 코드상 에러가 발생했을 떄 해당 라우트는 가장 가까운 error.js를 찾는다.
3-2. error.js는 'use client'가 필수이다. => 에러는 서버 컴포넌트에서만 발생하는게 아니기 때문
3-3. throw new Error()를 통해 에러가 발생하면 error.js의 {error} props를 통해 messasge를 반환할 수 있다.
(error.js는 props로 {error}를 받는다.)



*** NextJS 프로젝트를 생성하면 app 폴더의 파일들은 /에 경로에 매핑되는가? yes