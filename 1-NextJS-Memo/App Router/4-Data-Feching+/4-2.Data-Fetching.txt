1. useFormStatus
1-1. import {useFormStatus} from 'react'
1-2. 폼 내부에 자식 컴포넌트로 존재하고 제출이 되면 부모의 폼 정보를 받을 수 있다. => pending, data, method, action
1-3. NextJS에서 Form을 사용할 떄 서버 컴포넌트와 클라이언트 컴포넌트를 구분하여 Client 친화적 코드를 사용할 떄 주로 사용한다.


2. useActionState (서버 액션을 받아야 한다.)
2-1. import {useActionState} from 'react';
2-2. form의 server action props function에서 반환하는 모든 데이터를 다룰 수 있다.
2-3. action function이 무엇가를 return하면 state가 변경되는 Hooks이다.
2-4. const [state, action] =  useActionState(action, initialState);
(훅을 사용하면 훅에서 반환하는 action을 Form의 action props의 값으로 주어야한다.)
2-5. 2-4 이후에 액션은 formData를 첫 번쨰 인자로 받지 않는다. 첫 번째 인자는 상태가 prevState가 된다.
2-6. action에서 어떤 data가 return 되면 state가 변경되면서 useActionState 훅의 컴포넌트가 리렌더링된다.


3. Client, Server
3-1. 1,2의 훅을 사용하기 위해서는 'use client'를 사용해야 한다. => 클라이언트 컴포넌트로 분리한다.


4. useOptimistic (낙관적 업데이트) (react package의 hooks)
4-1. const [optimisticState, addOptimistic] = useOptimistic(state, updateFn);
4-2. useOptimistic의 인자로 첫 번쨰는 초기 상태 값, 두 번쨰는 상태 업데이트를 규정한다.
(두 번쨰 인자 함수에서 두 개의 파라미터를 받을 수 있다. 하나는 prevState, 다른 하나는 addOptimistic을 호출할 떄의 인자값이다.)
4-3. optimisticState => 상태 값, addOptimistic은 상태 변경 함수이다.
4-4. 만약 addOptimistic의 인자가 콜백함수라면 콜백함수의 실행 값이 updateFn의 두 번쨰 인자 값으로 들어간다.
4-5. NextJS와 함께 사용할 경우 'use client'와 사용 + 내부 로직도 같이 변경하여 클라이언트 - 서버를 동기화시켜 줘야 한다.
