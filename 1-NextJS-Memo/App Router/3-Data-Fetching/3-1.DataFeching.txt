1. NextJS에서 클라이언트 측에서 데이터 가져오기
1-1. useEffect + useState를 로직을 구성한다.
1-2. state는 error, loading, data 3개의 state를 생성
1-3. useEffect 내부에서 async 함수를 생성하고 로직을 만들고 호출한다.
1-4. error, isLoading일 떄 JSX return
1-5. Data가 존재할 떄는 Data를 포함한 JSX return

=> 이러한 방식은 서버로부터 Data를 가져오기 때문에 클라이언트에서 렌더링된다.
=> 기존의 JSX가 렌더링되고 서버의 데이터를 가져오면서 리렌더링이 되는 방식
=> HTML Source를 보면 서버에서 온 데이터 존재 x, SEO에 부적합


2. 서버 측 데이터 가져오기 (서버 컴포넌트를 통해 Data Fetching)
2-1. 서버 컴포넌트는 async 키워드를 사용해서 비동기 처리를 하여 데이터를 직접 처리할 수 있다.
2-2. 서버 컴포넌트가 직접 데이터를 fetch function을 사용해서 가져온다.
2-3. 서버 사이드 렌더링를 통해 데이터를 갖춘 HTML이 내려와서 HTML Source에 데이터가 존재하여 SEO에 유리


3. 서버 컴포넌트를 통해 Data Fetching 2
3-1. fetch을 통해 또 다른 서버에 접근하지 않고 NextJS 애플리케이션 내부에서 Data 서버를 두어서 가져올 수 있다.
=> 서버 컴포넌트는 서버에서 실행되기 때문, 일반적인 React 애플리케이션은 클라이언트가 DB에 접근할 수 없다.
3-2. better-sqlite를 통해 초기화하고 데이터를 주는 함수를 내보내고 서버 컴포넌트에서 실행하면 된다.
=> 서버에서 데이터를 가져오고 해당 데이터를 기반으로 JSX를 구축하고 브라우저에게 전달한다. => 서버 사이드 렌더링

