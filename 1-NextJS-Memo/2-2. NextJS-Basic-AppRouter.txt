1. 동적 라우트
1-1. 폴더를 생성할 떄 대괄호를 안에 커스텀 변수를 넣으면 동적 라우트가 활성화된다.

1-2. 구조
blog folder
            page.js
            [id] folder
                        page.js
=> URL을 통해서 접근하거나 Link을 통해서 /blog/post-1처럼 접근할 수 있다.
=> /post-1은 동적 라우트이다.

1-3. 구조 분해를 통해서 동적 라우트의 값을 알 수 있다. => {params.대괄호 값}


2. 레이아웃 +
2-1. 상위에 존재하는 레이아웃은 자기 자신의 page와 하위의 page을 대상으로 레이아웃한다.
2-2. layout은 children props을 통해서 page나 하위의 layout을 표시한다.

 
3. etc..
3-1. img를 가져올 떄 React 처럼 가져오지만 중괄호 내부에 넣을 떄 .src와 함께 사용한다.
3-2. Link를 사용할 떄 href을 주지 않으면 에러가 발생한다.


4. NextJS Styling
4-1. CSS module : 특정 컴포넌트 안에 CSS 파일이 스코프된다.


5. <Image>
5-1. 이미지 최적화를 위해 사용하는 컴포넌트이다.
5-2. 기존의 img 태그는 사진을 객체로 가져와서 .src에 접근해야 했지만 Image 컴포넌트의 src는 객체만 주어도 된다.
5-3. 자동 크기 조정 및 포맷 변환
(width나 height을 명시적으로 사용해도 디바이스 크기에 맞춰 이미지를 자동으로 최적화한다.)
5-4. Lazy Loading => 기본적으로 지원한다. 이를 원치 않는다면 priority 속성을 주면 된다.


6. 서버 컴포넌트 VS 클라이언트 컴포넌트
6-1. 서버 컴포넌트는 서버 사이드 렌더링의 대상이 되는 파일을 의미한다.
=> App Router을 사용할 떄 초기 HTML을 내려주는 것을 의미한다.
=> 이 떄 컴포넌트의 JSX가 HTML이 되고 JS 로직은 JS 번들이 되어 내려간다.

6-2. 클라이언트 컴포넌트는 클라이언트 사이드 렌더링의 대상이 되는 파일을 의미한다.
=> JS 번들을 비동기적으로 요청한다.
=> 'use client'을 명시하지 않으면 useState, 이벤트 핸들러를 사용할 수 없다. => 규칙이다.

6-3. 초기 서버 컴포넌트 안에 클라이언트 컴포넌트가 존재한다면?
=> 서버 사이드 렌더링을 시작한다. 이 떄 클라이언트 컴포넌트는 JS 번들에 포함된다.
=> 브라우저가 HTML을 렌더링한 이후 JS 번들이 실행되면서 클라이언트 컴포넌트도 DOM에 추가되어 표시된다.

